{
  "name": "gonzales-pe",
  "description": "Gonzales Preprocessor Edition (fast CSS parser)",
  "version": "3.0.0-28",
  "homepage": "http://github.com/tonyganch/gonzales-pe",
  "bugs": {
    "url": "http://github.com/tonyganch/gonzales-pe/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Tony Ganch",
    "email": "tonyganch+github@gmail.com",
    "url": "http://tonyganch.com"
  },
  "main": "./lib/gonzales",
  "repository": {
    "type": "git",
    "url": "http://github.com/tonyganch/gonzales-pe.git"
  },
  "scripts": {
    "log": "(mkdir -p log && node ./test/mocha.js) | tee ./log/test.log",
    "test": "node ./test/mocha.js"
  },
  "bin": {
    "gonzales": "./bin/gonzales.js"
  },
  "devDependencies": {
    "coffee-script": "~1.7.1",
    "mocha": "~1.20.0"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "readme": "## API\n\n### gonzales.parse(css, options)\n\nParse CSS.\n\nParameters:\n\n* `{String} css`\n* `{{syntax: String, rule: String}} options`\n\nReturns:\n\n* `{Object} ast`.\n\nExample:\n```js\n    var css = 'a {color: tomato}';\n    var ast = gonzales.parse(css);\n```\n\nExample:\n```js\n    var less = 'a {$color: tomato}';\n    var ast = gonzales.parse(less, {syntax: 'less'});\n```\n\nExample:\n```js\n    var less = '$color: tomato';\n    var ast = gonzales.parse(less, {syntax: 'less', rule: 'declaration'});\n```\n\n### gonzales.createNode(options)\n\nCreates a new node.\n\nParameters:\n\n* `{{type: String, content: String|Array}} options`\n\nReturns:\n\n* `{Object} ast`\n\nExample:\n```js\n    var css = 'a {color: tomato}';\n    var ast = gonzales.parse(css);\n    var node = gonzales.createNode({ type: 'animal', content: 'panda' });\n    ast.content.push(node);\n```\n\n### ast.length\n\n### ast.toString()\n\n### ast.toCSS(syntax)\n\nConverts AST to code.\n\nParameters:\n\n* `{String} syntax`\n\nReturns:\n\n* `{String} css`\n\nExample:\n```js\n    var css = ast.toCSS('css');\n    var less = ast.toCSS('less');\n```\n### ast.contains(type)\n\nChecks whether there is a child node of given type.\n\nParameters:\n\n* `{String} type`\n\nReturns:\n\n* `{Boolean}`\n\nExample:\n```js\n    if (ast.contains('panda'))\n        doSomething();\n```\n\n### ast.first(type)\n\nReturns the first child node of given type.\n\nParameters:\n\n* `{String=} type`\n\nReturns:\n\n* `{Node} node`\n\nExample:\n```js\n    var node = ast.first();\n    node.content = 'panda';\n```\n\nExample:\n```js\n    var node = ast.first('commentML');\n    node.content = 'panda';\n```\n\n### ast.forEach(type, function)\n\nCalls the function for every child node of given type.\n\nParameters:\n\n* `{String=} type`\n* `{Function} function`\n\nExample:\n```js\n    ast.forEach('commentML', function(node) {\n        node.content = 'panda';\n    });\n```\n\n### ast.get(index)\n\n### ast.insert(index, node)\n\n### ast.is(type)\n\nChecks whether the node is of given type.\n\nParameters:\n\n* `{String} type`\n\nReturns:\n\n* `{Boolean}`\n\nExample:\n```js\n    if (ast.is('s'))\n        ast.content = '';\n```\n\n### ast.last(type)\n\nReturns the last child node of given type.\n\nParameters:\n\n* `{String=} type`\n\nReturns:\n\n* `{Node} node`\n\nExample:\n```js\n    var node = ast.last()\n    node.content = 'panda';\n```\n\nExample:\n```js\n    var node = ast.last('commentML');\n    node.content = 'panda';\n```\n\n### ast.map(function)\n\nCalls the function for every node in a tree. Modifies the tree!\n\nParameters:\n\n* `{Function} function`\n\nExample:\n```js\n    ast.map(function(node) {\n        if (node.type === 'commentML') node.content = 'panda';\n    });\n```\n\n\n## Test\n\nTo run tests:\n\n    npm test\n\nThis command will build library files from sources and run tests on all files\nin syntax directories.\n\nEvery test has 3 files: source stylesheet, expected AST and expected string\ncompiled back from AST to css.\n\nIf some tests fail, you can find information in test logs:\n\n- `log/test.log` contains all information from stdout;\n- `log/expected.txt` contains only expected text;\n- `log/result.txt` contains only result text.\n\nThe last two are made for your convenience: you can use any diff app to see\nthe defference between them.\n\nIf you want to test one specific string or get a general idea of how Gonzales\nworks, you can use `test/ast.js` file.    \nSimply change the first two strings (`css` and `syntax` vars) and run:\n\n    node test/single-test.js\n\n## Report\n\nIf you find a bug or want to add a feature, welcome to [Issues](https://github.com/tonyganch/gonzales-pe/issues).\n\nIf you are shy but have a question, feel free to [drop me a\nline](mailto:tonyganch+gonzales@gmail.com).\n",
  "readmeFilename": "README.md",
  "_id": "gonzales-pe@3.0.0-28",
  "dist": {
    "shasum": "519bbc0332cd03ad3a2288a307bb6d0011132df7"
  },
  "_from": "gonzales-pe@3.0.0-28",
  "_resolved": "https://registry.npmjs.org/gonzales-pe/-/gonzales-pe-3.0.0-28.tgz"
}
